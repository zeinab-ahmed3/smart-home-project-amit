
Smart_Home_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800060  00800060  0000076c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000079c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001868  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfc  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cfe  00000000  00000000  00002e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000498  00000000  00000000  00003b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007cc  00000000  00000000  00003fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c73  00000000  00000000  000047b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00005423  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_1>
   8:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_2>
   c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 cc 02 	jmp	0x598	; 0x598 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__vector_9>
  28:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_10>
  2c:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <main>
  8a:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDirection>:
	    switch( PortID)
	    {
	      case PORTA: DDRA_REG = Direction ; break;
	      case PORTB: DDRB_REG = Direction ; break;
	      case PORTC: DDRC_REG = Direction ; break;
	      case PORTD: DDRD_REG = Direction ; break;
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_voidSetPinDirection+0x6>
  96:	72 c0       	rjmp	.+228    	; 0x17c <DIO_voidSetPinDirection+0xea>
  98:	68 30       	cpi	r22, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_voidSetPinDirection+0xc>
  9c:	6f c0       	rjmp	.+222    	; 0x17c <DIO_voidSetPinDirection+0xea>
  9e:	41 30       	cpi	r20, 0x01	; 1
  a0:	a1 f5       	brne	.+104    	; 0x10a <DIO_voidSetPinDirection+0x78>
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	89 f0       	breq	.+34     	; 0xc8 <DIO_voidSetPinDirection+0x36>
  a6:	28 f0       	brcs	.+10     	; 0xb2 <DIO_voidSetPinDirection+0x20>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	c9 f0       	breq	.+50     	; 0xde <DIO_voidSetPinDirection+0x4c>
  ac:	83 30       	cpi	r24, 0x03	; 3
  ae:	11 f1       	breq	.+68     	; 0xf4 <DIO_voidSetPinDirection+0x62>
  b0:	08 95       	ret
  b2:	2a b3       	in	r18, 0x1a	; 26
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_voidSetPinDirection+0x2c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_voidSetPinDirection+0x28>
  c2:	82 2b       	or	r24, r18
  c4:	8a bb       	out	0x1a, r24	; 26
  c6:	08 95       	ret
  c8:	27 b3       	in	r18, 0x17	; 23
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_voidSetPinDirection+0x42>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_voidSetPinDirection+0x3e>
  d8:	82 2b       	or	r24, r18
  da:	87 bb       	out	0x17, r24	; 23
  dc:	08 95       	ret
  de:	24 b3       	in	r18, 0x14	; 20
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_voidSetPinDirection+0x58>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_voidSetPinDirection+0x54>
  ee:	82 2b       	or	r24, r18
  f0:	84 bb       	out	0x14, r24	; 20
  f2:	08 95       	ret
  f4:	21 b3       	in	r18, 0x11	; 17
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_voidSetPinDirection+0x6e>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_voidSetPinDirection+0x6a>
 104:	82 2b       	or	r24, r18
 106:	81 bb       	out	0x11, r24	; 17
 108:	08 95       	ret
 10a:	41 11       	cpse	r20, r1
 10c:	37 c0       	rjmp	.+110    	; 0x17c <DIO_voidSetPinDirection+0xea>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	91 f0       	breq	.+36     	; 0x136 <DIO_voidSetPinDirection+0xa4>
 112:	28 f0       	brcs	.+10     	; 0x11e <DIO_voidSetPinDirection+0x8c>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	d9 f0       	breq	.+54     	; 0x14e <DIO_voidSetPinDirection+0xbc>
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	29 f1       	breq	.+74     	; 0x166 <DIO_voidSetPinDirection+0xd4>
 11c:	08 95       	ret
 11e:	2a b3       	in	r18, 0x1a	; 26
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_voidSetPinDirection+0x98>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_voidSetPinDirection+0x94>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	8a bb       	out	0x1a, r24	; 26
 134:	08 95       	ret
 136:	27 b3       	in	r18, 0x17	; 23
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_voidSetPinDirection+0xb0>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_voidSetPinDirection+0xac>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	87 bb       	out	0x17, r24	; 23
 14c:	08 95       	ret
 14e:	24 b3       	in	r18, 0x14	; 20
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_voidSetPinDirection+0xc8>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_voidSetPinDirection+0xc4>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	84 bb       	out	0x14, r24	; 20
 164:	08 95       	ret
 166:	21 b3       	in	r18, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_voidSetPinDirection+0xe0>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_voidSetPinDirection+0xdc>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret

0000017e <DIO_voidSetPinValue>:
 17e:	84 30       	cpi	r24, 0x04	; 4
 180:	08 f0       	brcs	.+2      	; 0x184 <DIO_voidSetPinValue+0x6>
 182:	72 c0       	rjmp	.+228    	; 0x268 <DIO_voidSetPinValue+0xea>
 184:	68 30       	cpi	r22, 0x08	; 8
 186:	08 f0       	brcs	.+2      	; 0x18a <DIO_voidSetPinValue+0xc>
 188:	6f c0       	rjmp	.+222    	; 0x268 <DIO_voidSetPinValue+0xea>
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	a1 f5       	brne	.+104    	; 0x1f6 <DIO_voidSetPinValue+0x78>
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	89 f0       	breq	.+34     	; 0x1b4 <DIO_voidSetPinValue+0x36>
 192:	28 f0       	brcs	.+10     	; 0x19e <DIO_voidSetPinValue+0x20>
 194:	82 30       	cpi	r24, 0x02	; 2
 196:	c9 f0       	breq	.+50     	; 0x1ca <DIO_voidSetPinValue+0x4c>
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	11 f1       	breq	.+68     	; 0x1e0 <DIO_voidSetPinValue+0x62>
 19c:	08 95       	ret
 19e:	2b b3       	in	r18, 0x1b	; 27
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_voidSetPinValue+0x2c>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_voidSetPinValue+0x28>
 1ae:	82 2b       	or	r24, r18
 1b0:	8b bb       	out	0x1b, r24	; 27
 1b2:	08 95       	ret
 1b4:	28 b3       	in	r18, 0x18	; 24
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_voidSetPinValue+0x42>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_voidSetPinValue+0x3e>
 1c4:	82 2b       	or	r24, r18
 1c6:	88 bb       	out	0x18, r24	; 24
 1c8:	08 95       	ret
 1ca:	25 b3       	in	r18, 0x15	; 21
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_voidSetPinValue+0x58>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_voidSetPinValue+0x54>
 1da:	82 2b       	or	r24, r18
 1dc:	85 bb       	out	0x15, r24	; 21
 1de:	08 95       	ret
 1e0:	22 b3       	in	r18, 0x12	; 18
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_voidSetPinValue+0x6e>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_voidSetPinValue+0x6a>
 1f0:	82 2b       	or	r24, r18
 1f2:	82 bb       	out	0x12, r24	; 18
 1f4:	08 95       	ret
 1f6:	41 11       	cpse	r20, r1
 1f8:	37 c0       	rjmp	.+110    	; 0x268 <DIO_voidSetPinValue+0xea>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	91 f0       	breq	.+36     	; 0x222 <DIO_voidSetPinValue+0xa4>
 1fe:	28 f0       	brcs	.+10     	; 0x20a <DIO_voidSetPinValue+0x8c>
 200:	82 30       	cpi	r24, 0x02	; 2
 202:	d9 f0       	breq	.+54     	; 0x23a <DIO_voidSetPinValue+0xbc>
 204:	83 30       	cpi	r24, 0x03	; 3
 206:	29 f1       	breq	.+74     	; 0x252 <DIO_voidSetPinValue+0xd4>
 208:	08 95       	ret
 20a:	2b b3       	in	r18, 0x1b	; 27
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_voidSetPinValue+0x98>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_voidSetPinValue+0x94>
 21a:	80 95       	com	r24
 21c:	82 23       	and	r24, r18
 21e:	8b bb       	out	0x1b, r24	; 27
 220:	08 95       	ret
 222:	28 b3       	in	r18, 0x18	; 24
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinValue+0xb0>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinValue+0xac>
 232:	80 95       	com	r24
 234:	82 23       	and	r24, r18
 236:	88 bb       	out	0x18, r24	; 24
 238:	08 95       	ret
 23a:	25 b3       	in	r18, 0x15	; 21
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_voidSetPinValue+0xc8>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_voidSetPinValue+0xc4>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	85 bb       	out	0x15, r24	; 21
 250:	08 95       	ret
 252:	22 b3       	in	r18, 0x12	; 18
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_voidSetPinValue+0xe0>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_voidSetPinValue+0xdc>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	82 bb       	out	0x12, r24	; 18
 268:	08 95       	ret

0000026a <DIO_voidSetPortValue>:

}
void      DIO_voidSetPortValue     (u8 PortID , u8 Value)
{
	   /*       Range Check       */
    if(PortID<4)
 26a:	84 30       	cpi	r24, 0x04	; 4
 26c:	78 f4       	brcc	.+30     	; 0x28c <DIO_voidSetPortValue+0x22>
	{
	    switch( PortID)
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	41 f0       	breq	.+16     	; 0x282 <DIO_voidSetPortValue+0x18>
 272:	28 f0       	brcs	.+10     	; 0x27e <DIO_voidSetPortValue+0x14>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	39 f0       	breq	.+14     	; 0x286 <DIO_voidSetPortValue+0x1c>
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	39 f0       	breq	.+14     	; 0x28a <DIO_voidSetPortValue+0x20>
 27c:	08 95       	ret
	    {
	      case PORTA: PORTA_REG = Value ; break;
 27e:	6b bb       	out	0x1b, r22	; 27
 280:	08 95       	ret
	      case PORTB: PORTB_REG = Value ; break;
 282:	68 bb       	out	0x18, r22	; 24
 284:	08 95       	ret
	      case PORTC: PORTC_REG = Value ; break;
 286:	65 bb       	out	0x15, r22	; 21
 288:	08 95       	ret
	      case PORTD: PORTD_REG = Value ; break;
 28a:	62 bb       	out	0x12, r22	; 18
 28c:	08 95       	ret

0000028e <__vector_1>:
{
	EXTI_CALLBACK[copy_u8Line] = ptr;
}
/********************************************************************************************************************/
void __vector_1 (void)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	5f 93       	push	r21
 2a0:	6f 93       	push	r22
 2a2:	7f 93       	push	r23
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
	EXTI_CALLBACK[0]();
 2b0:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <EXTI_CALLBACK>
 2b4:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <EXTI_CALLBACK+0x1>
 2b8:	09 95       	icall
}
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	7f 91       	pop	r23
 2c8:	6f 91       	pop	r22
 2ca:	5f 91       	pop	r21
 2cc:	4f 91       	pop	r20
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <__vector_2>:
/********************************************************************************************************************/
void __vector_2 (void)
{
	EXTI_CALLBACK[1]();
 2dc:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <EXTI_CALLBACK+0x2>
 2e0:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <EXTI_CALLBACK+0x3>
 2e4:	09 95       	icall
 2e6:	08 95       	ret

000002e8 <__vector_3>:
}
/********************************************************************************************************************/
void __vector_3 (void)
{
	EXTI_CALLBACK[2]();
 2e8:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <EXTI_CALLBACK+0x4>
 2ec:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <EXTI_CALLBACK+0x5>
 2f0:	09 95       	icall
 2f2:	08 95       	ret

000002f4 <main>:
#include "SSD_interface.h"
#include "SSD_config.h"
#include <util/delay.h>
int main(void)
{
	DIO_voidSetPinDirection(PORTC,PIN2,OUTPUT); // set led on portc in pin2 and output
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	62 e0       	ldi	r22, 0x02	; 2
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN1,OUTPUT); // set UART on portd in pin1 and output
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	83 e0       	ldi	r24, 0x03	; 3
 304:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN0,INPUT);  // set UART on portd in pin0 and input
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTA,PIN3,OUTPUT);
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	63 e0       	ldi	r22, 0x03	; 3
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	UART_VoidInit();                            // iniallization UART
 31c:	0e 94 6d 03 	call	0x6da	; 0x6da <UART_VoidInit>
	SPI_MasterInit();                           // iniallization SPI master
 320:	0e 94 ef 01 	call	0x3de	; 0x3de <SPI_MasterInit>
	SSD_voidInit();                           
 324:	0e 94 1b 02 	call	0x436	; 0x436 <SSD_voidInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 328:	2f ef       	ldi	r18, 0xFF	; 255
 32a:	83 ed       	ldi	r24, 0xD3	; 211
 32c:	90 e3       	ldi	r25, 0x30	; 48
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	80 40       	sbci	r24, 0x00	; 0
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0x3a>
 336:	00 c0       	rjmp	.+0      	; 0x338 <main+0x44>
 338:	00 00       	nop
	u8 flag = 0;                                // decleration variable ( flag )
	while(1)
	{
		_delay_ms(1000); // delay before to prevent data collision

		flag = UART_VoidRecieve();              // put data recieved from bluetooth in flag
 33a:	0e 94 76 03 	call	0x6ec	; 0x6ec <UART_VoidRecieve>
 33e:	c8 2f       	mov	r28, r24
		SPI_u8MasterTransmitRecive(flag);       // transimmit flag to other micro through SPI
 340:	0e 94 09 02 	call	0x412	; 0x412 <SPI_u8MasterTransmitRecive>
		if(flag == '1')
 344:	c1 33       	cpi	r28, 0x31	; 49
 346:	f1 f4       	brne	.+60     	; 0x384 <main+0x90>
		 {
			 DIO_voidSetPinValue(PORTC,PIN2,HIGH);
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	62 e0       	ldi	r22, 0x02	; 2
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_voidSetPinValue>
			 DIO_voidSetPinValue(PORTA,PIN3,HIGH);
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	63 e0       	ldi	r22, 0x03	; 3
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_voidSetPinValue>
 35c:	2f ef       	ldi	r18, 0xFF	; 255
 35e:	89 e6       	ldi	r24, 0x69	; 105
 360:	98 e1       	ldi	r25, 0x18	; 24
 362:	21 50       	subi	r18, 0x01	; 1
 364:	80 40       	sbci	r24, 0x00	; 0
 366:	90 40       	sbci	r25, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <main+0x6e>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <main+0x78>
 36c:	00 00       	nop
			 _delay_ms(500);
			 DIO_voidSetPinValue(PORTA,PIN3,LOW);
 36e:	40 e0       	ldi	r20, 0x00	; 0
 370:	63 e0       	ldi	r22, 0x03	; 3
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_voidSetPinValue>
			 SSD_voidEnableA();
 378:	0e 94 41 02 	call	0x482	; 0x482 <SSD_voidEnableA>
             SSD_voidSendNumber(1);
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 3a 02 	call	0x474	; 0x474 <SSD_voidSendNumber>
 382:	d2 cf       	rjmp	.-92     	; 0x328 <main+0x34>
		}                                       // check if flag == 1 --> led on
		else if (flag == '0')
 384:	c0 33       	cpi	r28, 0x30	; 48
 386:	81 f6       	brne	.-96     	; 0x328 <main+0x34>
		{
			DIO_voidSetPinValue(PORTC,PIN2,LOW); // chech if flag == 0 --> led off
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	62 e0       	ldi	r22, 0x02	; 2
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTA,PIN3,HIGH);
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	63 e0       	ldi	r22, 0x03	; 3
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_voidSetPinValue>
 39c:	2f ef       	ldi	r18, 0xFF	; 255
 39e:	89 e6       	ldi	r24, 0x69	; 105
 3a0:	98 e1       	ldi	r25, 0x18	; 24
 3a2:	21 50       	subi	r18, 0x01	; 1
 3a4:	80 40       	sbci	r24, 0x00	; 0
 3a6:	90 40       	sbci	r25, 0x00	; 0
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0xae>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <main+0xb8>
 3ac:	00 00       	nop
			 _delay_ms(500);
			 DIO_voidSetPinValue(PORTA,PIN3,LOW);
 3ae:	40 e0       	ldi	r20, 0x00	; 0
 3b0:	63 e0       	ldi	r22, 0x03	; 3
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_voidSetPinValue>
			SSD_voidDisbaleA();
 3b8:	0e 94 4d 02 	call	0x49a	; 0x49a <SSD_voidDisbaleA>
			SSD_voidEnableB();
 3bc:	0e 94 47 02 	call	0x48e	; 0x48e <SSD_voidEnableB>
	        SSD_voidSendNumber(0);
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0e 94 3a 02 	call	0x474	; 0x474 <SSD_voidSendNumber>
 3c6:	2f ef       	ldi	r18, 0xFF	; 255
 3c8:	83 ed       	ldi	r24, 0xD3	; 211
 3ca:	90 e3       	ldi	r25, 0x30	; 48
 3cc:	21 50       	subi	r18, 0x01	; 1
 3ce:	80 40       	sbci	r24, 0x00	; 0
 3d0:	90 40       	sbci	r25, 0x00	; 0
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <main+0xd8>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <main+0xe2>
 3d6:	00 00       	nop
			_delay_ms(1000);
			SSD_voidDisbaleB();
 3d8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SSD_voidDisbaleB>
 3dc:	a5 cf       	rjmp	.-182    	; 0x328 <main+0x34>

000003de <SPI_MasterInit>:
{
	DIO_voidSetPinDirection  (PORTB , PIN5 , INPUT);
	DIO_voidSetPinDirection  (PORTB , PIN6 ,OUTPUT);
	DIO_voidSetPinDirection  (PORTB , PIN7 , INPUT);
	DIO_voidSetPinDirection  (PORTB , PIN4 , INPUT);
	SPCR_REG = 0b01100000;
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	65 e0       	ldi	r22, 0x05	; 5
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	66 e0       	ldi	r22, 0x06	; 6
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 3f2:	41 e0       	ldi	r20, 0x01	; 1
 3f4:	67 e0       	ldi	r22, 0x07	; 7
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	64 e0       	ldi	r22, 0x04	; 4
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 406:	81 e7       	ldi	r24, 0x71	; 113
 408:	8d b9       	out	0x0d, r24	; 13
 40a:	1e b8       	out	0x0e, r1	; 14
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	8f b9       	out	0x0f, r24	; 15
 410:	08 95       	ret

00000412 <SPI_u8MasterTransmitRecive>:
}
/**************************************************************/
u8           SPI_u8MasterTransmitRecive    (u8 Data)
{
 412:	cf 93       	push	r28
 414:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue      (PORTB , PIN4 , 0);
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	64 e0       	ldi	r22, 0x04	; 4
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_voidSetPinValue>
	SPDR_REG = Data;
 420:	cf b9       	out	0x0f, r28	; 15
	while (GET_BIT (SPSR_REG , 7) == 0);
 422:	77 9b       	sbis	0x0e, 7	; 14
 424:	fe cf       	rjmp	.-4      	; 0x422 <SPI_u8MasterTransmitRecive+0x10>
	DIO_voidSetPinValue      (PORTB , PIN4 , 1);
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	64 e0       	ldi	r22, 0x04	; 4
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_voidSetPinValue>
	return SPDR_REG;
 430:	8f b1       	in	r24, 0x0f	; 15
}
 432:	cf 91       	pop	r28
 434:	08 95       	ret

00000436 <SSD_voidInit>:
#include      "SSD_interface.h"
#include      <util/delay.h>
/***************************************************************************/
void SSD_voidInit( void )
{
	DIO_voidSetPinDirection( PORTA , PIN4 , OUTPUT );
 436:	41 e0       	ldi	r20, 0x01	; 1
 438:	64 e0       	ldi	r22, 0x04	; 4
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( PORTA , PIN5 , OUTPUT );
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	65 e0       	ldi	r22, 0x05	; 5
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( PORTA , PIN6 , OUTPUT );
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	66 e0       	ldi	r22, 0x06	; 6
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( PORTA , PIN7 , OUTPUT );
 454:	41 e0       	ldi	r20, 0x01	; 1
 456:	67 e0       	ldi	r22, 0x07	; 7
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>

	#if SSD_NUM_1 == SSD_A
		DIO_voidSetPinDirection( PORTB , PIN2 , OUTPUT );
 45e:	41 e0       	ldi	r20, 0x01	; 1
 460:	62 e0       	ldi	r22, 0x02	; 2
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	#endif
	
	#if SSD_NUM_2 == SSD_B
		DIO_voidSetPinDirection( PORTB , PIN1 , OUTPUT );
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	61 e0       	ldi	r22, 0x01	; 1
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 472:	08 95       	ret

00000474 <SSD_voidSendNumber>:
	#endif
}
/***************************************************************************/
void SSD_voidSendNumber( u8 Copy_u8Number )
{
	DIO_voidSetPortValue( PORTA , ( Copy_u8Number << 4 ) );
 474:	68 2f       	mov	r22, r24
 476:	62 95       	swap	r22
 478:	60 7f       	andi	r22, 0xF0	; 240
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_voidSetPortValue>
 480:	08 95       	ret

00000482 <SSD_voidEnableA>:
/***************************************************************************/
void SSD_voidEnableA  (void)
{
	if( SSD_NUM_1 == SSD_A )
	{	
		DIO_voidSetPinValue( PORTB , PIN2 , HIGH );
 482:	41 e0       	ldi	r20, 0x01	; 1
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_voidSetPinValue>
 48c:	08 95       	ret

0000048e <SSD_voidEnableB>:
}
/***************************************************************************/
void SSD_voidEnableB  (void){
	if( SSD_NUM_2 == SSD_B )
    {
		DIO_voidSetPinValue( PORTB , PIN1 , HIGH );
 48e:	41 e0       	ldi	r20, 0x01	; 1
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_voidSetPinValue>
 498:	08 95       	ret

0000049a <SSD_voidDisbaleA>:
void SSD_voidDisbaleA (void)
{

	if( SSD_NUM_1 == SSD_A )
    {
		DIO_voidSetPinValue( PORTB , PIN2 , LOW );
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	62 e0       	ldi	r22, 0x02	; 2
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_voidSetPinValue>
 4a4:	08 95       	ret

000004a6 <SSD_voidDisbaleB>:
/***************************************************************************/
void SSD_voidDisbaleB (void)
{
	if( SSD_NUM_2 == SSD_B )
    {
		DIO_voidSetPinValue( PORTB , PIN1 , LOW );
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_voidSetPinValue>
 4b0:	08 95       	ret

000004b2 <__vector_10>:
	TIM0_CALLBACK[TIM0_CTC]();
}
/*************************************************************************/
void TIM0_OV_voidSetCallBack( void(*ptr)(void))
{
	TIM0_CALLBACK[TIM0_OVF] = ptr;
 4b2:	1f 92       	push	r1
 4b4:	0f 92       	push	r0
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	0f 92       	push	r0
 4ba:	11 24       	eor	r1, r1
 4bc:	2f 93       	push	r18
 4be:	3f 93       	push	r19
 4c0:	4f 93       	push	r20
 4c2:	5f 93       	push	r21
 4c4:	6f 93       	push	r22
 4c6:	7f 93       	push	r23
 4c8:	8f 93       	push	r24
 4ca:	9f 93       	push	r25
 4cc:	af 93       	push	r26
 4ce:	bf 93       	push	r27
 4d0:	ef 93       	push	r30
 4d2:	ff 93       	push	r31
 4d4:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <TIM0_CALLBACK+0x2>
 4d8:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <TIM0_CALLBACK+0x3>
 4dc:	09 95       	icall
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	bf 91       	pop	r27
 4e4:	af 91       	pop	r26
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	7f 91       	pop	r23
 4ec:	6f 91       	pop	r22
 4ee:	5f 91       	pop	r21
 4f0:	4f 91       	pop	r20
 4f2:	3f 91       	pop	r19
 4f4:	2f 91       	pop	r18
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <__vector_11>:
}
/*************************************************************************/
void __vector_11(void)
{
 500:	1f 92       	push	r1
 502:	0f 92       	push	r0
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	0f 92       	push	r0
 508:	11 24       	eor	r1, r1
 50a:	2f 93       	push	r18
 50c:	3f 93       	push	r19
 50e:	4f 93       	push	r20
 510:	5f 93       	push	r21
 512:	6f 93       	push	r22
 514:	7f 93       	push	r23
 516:	8f 93       	push	r24
 518:	9f 93       	push	r25
 51a:	af 93       	push	r26
 51c:	bf 93       	push	r27
 51e:	ef 93       	push	r30
 520:	ff 93       	push	r31
	TIM0_CALLBACK[TIM0_OVF]();
 522:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <TIM0_CALLBACK>
 526:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <TIM0_CALLBACK+0x1>
 52a:	09 95       	icall
 52c:	ff 91       	pop	r31
 52e:	ef 91       	pop	r30
 530:	bf 91       	pop	r27
 532:	af 91       	pop	r26
 534:	9f 91       	pop	r25
 536:	8f 91       	pop	r24
 538:	7f 91       	pop	r23
 53a:	6f 91       	pop	r22
 53c:	5f 91       	pop	r21
 53e:	4f 91       	pop	r20
 540:	3f 91       	pop	r19
 542:	2f 91       	pop	r18
 544:	0f 90       	pop	r0
 546:	0f be       	out	0x3f, r0	; 63
 548:	0f 90       	pop	r0
 54a:	1f 90       	pop	r1
 54c:	18 95       	reti

0000054e <__vector_9>:
u32 volatile flag   =0;
u32 volatile freq   =0;
u32 volatile DC     =0;
/*********************************************************/
void __vector_9(void)
{
 54e:	1f 92       	push	r1
 550:	0f 92       	push	r0
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	0f 92       	push	r0
 556:	11 24       	eor	r1, r1
 558:	8f 93       	push	r24
 55a:	9f 93       	push	r25
 55c:	af 93       	push	r26
 55e:	bf 93       	push	r27
	counter ++;
 560:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <counter>
 564:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <counter+0x1>
 568:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <counter+0x2>
 56c:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <counter+0x3>
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	a1 1d       	adc	r26, r1
 574:	b1 1d       	adc	r27, r1
 576:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <counter>
 57a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <counter+0x1>
 57e:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <counter+0x2>
 582:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <counter+0x3>
}
 586:	bf 91       	pop	r27
 588:	af 91       	pop	r26
 58a:	9f 91       	pop	r25
 58c:	8f 91       	pop	r24
 58e:	0f 90       	pop	r0
 590:	0f be       	out	0x3f, r0	; 63
 592:	0f 90       	pop	r0
 594:	1f 90       	pop	r1
 596:	18 95       	reti

00000598 <__vector_6>:
/*********************************************************/
void __vector_6(void)
{
 598:	1f 92       	push	r1
 59a:	0f 92       	push	r0
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	0f 92       	push	r0
 5a0:	11 24       	eor	r1, r1
 5a2:	2f 93       	push	r18
 5a4:	3f 93       	push	r19
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
 5aa:	af 93       	push	r26
 5ac:	bf 93       	push	r27
	if(flag==0)
 5ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5b2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5b6:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 5ba:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 5be:	89 2b       	or	r24, r25
 5c0:	8a 2b       	or	r24, r26
 5c2:	8b 2b       	or	r24, r27
 5c4:	c1 f4       	brne	.+48     	; 0x5f6 <__vector_6+0x5e>
	{
		snap1=ICR1;
 5c6:	86 b5       	in	r24, 0x26	; 38
 5c8:	97 b5       	in	r25, 0x27	; 39
 5ca:	a0 e0       	ldi	r26, 0x00	; 0
 5cc:	b0 e0       	ldi	r27, 0x00	; 0
 5ce:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <snap1>
 5d2:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <snap1+0x1>
 5d6:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <snap1+0x2>
 5da:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <snap1+0x3>
		CLR_BIT(TCCR1B,6);
 5de:	8e b5       	in	r24, 0x2e	; 46
 5e0:	8f 7b       	andi	r24, 0xBF	; 191
 5e2:	8e bd       	out	0x2e, r24	; 46
		counter=0;
 5e4:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <counter>
 5e8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <counter+0x1>
 5ec:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <counter+0x2>
 5f0:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <counter+0x3>
 5f4:	54 c0       	rjmp	.+168    	; 0x69e <__vector_6+0x106>
	}
	else if(flag==1)
 5f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5fa:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5fe:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 602:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	a1 05       	cpc	r26, r1
 60a:	b1 05       	cpc	r27, r1
 60c:	e9 f4       	brne	.+58     	; 0x648 <__vector_6+0xb0>
	{
		snap2=ICR1+(counter*65536);
 60e:	26 b5       	in	r18, 0x26	; 38
 610:	37 b5       	in	r19, 0x27	; 39
 612:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <counter>
 616:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <counter+0x1>
 61a:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <counter+0x2>
 61e:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <counter+0x3>
 622:	dc 01       	movw	r26, r24
 624:	99 27       	eor	r25, r25
 626:	88 27       	eor	r24, r24
 628:	82 0f       	add	r24, r18
 62a:	93 1f       	adc	r25, r19
 62c:	a1 1d       	adc	r26, r1
 62e:	b1 1d       	adc	r27, r1
 630:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <snap2>
 634:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <snap2+0x1>
 638:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <snap2+0x2>
 63c:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <snap2+0x3>
		SET_BIT(TCCR1B,6);
 640:	8e b5       	in	r24, 0x2e	; 46
 642:	80 64       	ori	r24, 0x40	; 64
 644:	8e bd       	out	0x2e, r24	; 46
 646:	2b c0       	rjmp	.+86     	; 0x69e <__vector_6+0x106>
	}
	else if(flag==2)
 648:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 64c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 650:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 654:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 658:	02 97       	sbiw	r24, 0x02	; 2
 65a:	a1 05       	cpc	r26, r1
 65c:	b1 05       	cpc	r27, r1
 65e:	f9 f4       	brne	.+62     	; 0x69e <__vector_6+0x106>
	{
		snap3=ICR1+(counter*65536);
 660:	26 b5       	in	r18, 0x26	; 38
 662:	37 b5       	in	r19, 0x27	; 39
 664:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <counter>
 668:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <counter+0x1>
 66c:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <counter+0x2>
 670:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <counter+0x3>
 674:	dc 01       	movw	r26, r24
 676:	99 27       	eor	r25, r25
 678:	88 27       	eor	r24, r24
 67a:	82 0f       	add	r24, r18
 67c:	93 1f       	adc	r25, r19
 67e:	a1 1d       	adc	r26, r1
 680:	b1 1d       	adc	r27, r1
 682:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <snap3>
 686:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <snap3+0x1>
 68a:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <snap3+0x2>
 68e:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <snap3+0x3>
		CLR_BIT(TIMSK,5);
 692:	89 b7       	in	r24, 0x39	; 57
 694:	8f 7d       	andi	r24, 0xDF	; 223
 696:	89 bf       	out	0x39, r24	; 57
		CLR_BIT(TIMSK,2);
 698:	89 b7       	in	r24, 0x39	; 57
 69a:	8b 7f       	andi	r24, 0xFB	; 251
 69c:	89 bf       	out	0x39, r24	; 57
	}
	flag++;
 69e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6a2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6a6:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 6aa:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 6ae:	01 96       	adiw	r24, 0x01	; 1
 6b0:	a1 1d       	adc	r26, r1
 6b2:	b1 1d       	adc	r27, r1
 6b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 6b8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6bc:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 6c0:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 6c4:	bf 91       	pop	r27
 6c6:	af 91       	pop	r26
 6c8:	9f 91       	pop	r25
 6ca:	8f 91       	pop	r24
 6cc:	3f 91       	pop	r19
 6ce:	2f 91       	pop	r18
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	0f 90       	pop	r0
 6d6:	1f 90       	pop	r1
 6d8:	18 95       	reti

000006da <UART_VoidInit>:
}
/************************************************************/
void         UART_VoidTransmit      (u8 Data)
{
	while(GET_BIT(UCSRA,5)==0);
	UDR=Data;	
 6da:	1b b8       	out	0x0b, r1	; 11
 6dc:	88 e1       	ldi	r24, 0x18	; 24
 6de:	8a b9       	out	0x0a, r24	; 10
 6e0:	86 e8       	ldi	r24, 0x86	; 134
 6e2:	80 bd       	out	0x20, r24	; 32
 6e4:	87 e6       	ldi	r24, 0x67	; 103
 6e6:	89 b9       	out	0x09, r24	; 9
 6e8:	10 bc       	out	0x20, r1	; 32
 6ea:	08 95       	ret

000006ec <UART_VoidRecieve>:
}
/************************************************************/
u8           UART_VoidRecieve       (void)
{ 
	while(GET_BIT(UCSRA,7)==0);
 6ec:	5f 9b       	sbis	0x0b, 7	; 11
 6ee:	fe cf       	rjmp	.-4      	; 0x6ec <UART_VoidRecieve>

	return UDR;	
 6f0:	8c b1       	in	r24, 0x0c	; 12
}
 6f2:	08 95       	ret

000006f4 <_exit>:
 6f4:	f8 94       	cli

000006f6 <__stop_program>:
 6f6:	ff cf       	rjmp	.-2      	; 0x6f6 <__stop_program>
